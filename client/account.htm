<!--Nav pills-->
<ul id="accountNavigation" class="nav nav-pills">
    <li class="active">
        <a id="accountOverview" href="#">Overview</a>
    </li>
    <li><a id="accountEdit" href="#">Edit profile</a></li>
    <li><a id="accountBalance" href="#">Add credits</a></li>
</ul>

<!--Content-->
<div id="account-content">
    <!--Content added dynamically (code below)-->
</div>
<script>
if (!framework.user) { //If the user is not logged in
    framework.loadPage(framework.defaultPage, null, null, function () {
        output.error('Login required.', 'You need to log in to see this page');
    });
} else { //If the user is logged in, display the page
    var content, currentItems, currentPage, currentMediaType='movie', itemsPerPage;
    content = $('#account-content');
    itemsPerPage = 10;

    //We wrap the content in functions as to always use the latest data
    /**
     * Creates the conctent of the overview page
     * @returns {string} The html of the overview page
     */
    function showOverview() {
        content.html('<div class="row">\
                            <div class="span2"><img src="http://gravatar.com/avatar/' + $.md5(framework.user.email) + '?size=100&d=mm" class="img-polaroid"></div>\
                            <p>Username: <strong id="usernameSpan">' + framework.user.username + '</strong></p>\
                            <p>Name: <strong id="nameSpan">' + framework.user.name + '</strong></p>\
                            <p>Email: <strong id="emailSpan">' + framework.user.email + '</strong></p>\
                            <p>Balance: <strong id="balanceSpan">' + framework.user.balance + '</strong></p>\
                     </div>\
                     <legend>Media library</legend>\
                     <ul id="mediaNav" class="nav nav-tabs">\
                        <li class="active">\
                            <a id="movieNav" href="#">Movies</a>\
                        </li>\
                        <li>\
                            <a id="songNav" href="#">Songs</a>\
                        </li>\
                    </ul>\
                    <div class="accordion" id="accordion">\
                         </div>\
                         <div class="pagination" id="accountPagination">\
                            <ul id="accountPaginationList"/>\
                    </div>\
                 ');
        showMovies(); //default tabbed nav in the media library

        //add pagination listeners for the media library
        //Adds a click listener to the navigation of the overview page.
        $("#mediaNav a").click(function (e) {
            e.preventDefault(); //Prevent the default click listener, since this is a a-tag.
            $("#mediaNav li.active").removeClass("active"); //Remove the active styling of every account navigation tab, ...
            $(this).parent().addClass("active"); //and it it again to the parent of the clicked link
            switch (this.id) {
                case('movieNav'):
                    currentMediaType = 'movie';
                    showMovies();
                    break;
                case('songNav'):
                    currentMediaType = 'song';
                    showSongs();
                    break;
            }
        });
    };

    /**
     * Gets the download link for a specific item
     * @param item The item to fetch a link for
     * @returns {string} The link to the item. Javascript:void(0) if no item found.
     */
    function getDownloadLink(item) {
            var data = $.parseJSON(
                    $.ajax({
                url: 'http://rentit.itu.dk/RentIt25/moofy.svc/' + currentMediaType + 's/' + item.id + '/download?userId=' + framework.user.id,
                type: 'GET',
                dataType: 'json',
                contentType: 'application/json; charset=utf-8',
                async: false
                }).responseText);
            if(data.success) {
                return ('http://' + data.downloadLink);
            } else {
                output.error('Download link not found!', 'The download link for the item '+item.title+' was not found');
                return 'javascript:void(0)';
            }
    }

    /*
    //Filters the currently shown items. Not yet implemented fully.
    //TODO: Finalize this!
    function filterItems(filter) {

        var callBack = function(element, index, array) {
            return (element.description.toLowerCase().contains(filter) ||
                    element.title.toLowerCase().contains(filter));
        };

        switch (currentMediaType) {
            case('movie'):
                currentItems = currentItems.filter(callBack);
                break;
            case('song'):
                currentItems = currentItems.filter(callBack);
                break;
        };

    }*/

    /**
     * Shows the the current users' movies
     * @param filter Optional parameter. This was not implemented.
     * @param sortBy Optional parameter. This was not implemented.
     */
    function showMovies(filter, sortBy) {
        $.ajax({
            url: 'http://rentit.itu.dk/RentIt25/moofy.svc/users/'+framework.user.id+'/movies/current',
            type: 'GET',
            contentType: 'application/json; charset=utf-8',
            dataType: 'json',
            async: true,
            success: function (movs) {
                currentPage = 0;
                currentItems = movs;
                if(filter) {
                    filterItems(filter);
                }
                createAccordion();
                framework.rebindInternalLinks();
            },
            error: function (msg) {
                output.error("Error!", "failed to connect to server, please try again");
            }
        });
    };

    /**
     * Shows the the current users' songs
     * @param filter Optional parameter. This was not implemented.
     * @param sortBy Optional parameter. This was not implemented.
     */
    function showSongs(filter, sortBy) {
        $.ajax({
            url: 'http://rentit.itu.dk/RentIt25/moofy.svc/users/'+framework.user.id+'/songs/current',
            type: 'GET',
            contentType: 'application/json; charset=utf-8',
            dataType: 'json',
            async: true,
            success: function (songs) {
                currentItems = songs;
                currentPage = 0;
                createAccordion();
                framework.rebindInternalLinks();
            },
            error: function (msg) {
                output.error("Error!", "failed to connect to server, please try again");
            }
        });
    };

    /**
     * Creates the conctent of the edit page
     * @returns {string} The html of the edit page
     */
    function showEdit() {
        content.html('<form id="editUserForm" class="form-horizontal">\
                    <legend>Edit profile</legend>\
                    <div class="control-group">\
                        <label class="control-label" for="inputName">Name (optional)</label>\
                        <div class="controls">\
                            <div class="input-prepend">\
                                <span class="add-on"><i class="icon-user"></i></span>\
                                <input type="text" id="inputName" placeholder="' + framework.user.name + '"/>\
                            </div>\
                        </div>\
                    </div>\
                    <div class="control-group">\
                        <label class="control-label" for="inputEmail">Email (optional)</label>\
                        <div class="controls">\
                            <div class="input-prepend">\
                                <span class="add-on"><i class="icon-envelope"></i></span>\
                                <input type="text" id="inputEmail" placeholder="' + framework.user.email + '"/>\
                            </div>\
                        </div>\
                    </div>\
                    <div class="control-group">\
                        <label class="control-label" for="inputPassword">Password (optional)</label>\
                        <div class="controls">\
                            <div class="input-prepend">\
                                <span class="add-on"><i class="icon-asterisk"></i></span>\
                                <input type="password" id="inputPassword"/>\
                            </div>\
                        </div>\
                    </div>\
                    <div class="form-actions">\
                        <input type="submit" class="btn btn-primary" value="Save changes"/>\
                    </div>\
            </form>');
        //Submit handler (update user information)
        $('#editUserForm').submit(function () {
            var cleanedInputName = $("#inputName").val().trim();
            var cleanedInputEmail = $("#inputEmail").val().trim();
            var cleanedInputPassword = $("#inputPassword").val().trim();
            
            //This variable decides whether or not any data has changed (if any data has, the form should submit)
            var submit = false;
            
            var postData = {};
            if (cleanedInputName) {
                submit = true;
                postData.name = cleanedInputName;
            }
            if (cleanedInputEmail) {
                submit = true;
                postData.email = cleanedInputEmail;
            }
            if (cleanedInputPassword) {
                submit = true;
                postData.password = cleanedInputPassword;
            }

            if (submit) {
                $.ajax({
                    url: 'http://rentit.itu.dk/RentIt25/moofy.svc/users/' + framework.user.id + '/update',
                    type: 'POST',
                    data: JSON.stringify(postData),
                    contentType: 'application/json; charset=utf-8',
                    dataType: 'json',
                    async: true,
                    success: function (msg) {
                        if (msg.success) {
                            if (cleanedInputName) framework.user.name = cleanedInputName;
                            if (cleanedInputEmail) framework.user.email = cleanedInputEmail;
                            if (cleanedInputPassword) framework.user.password = cleanedInputEmail;
                            //TODO: Consider giving the framework a reference to the following function or listen on the user object for changes
                            reloadUserBox();
                            framework.loadPage('account');
                            output.success('Profile updated!', 'The profile was successfully updated.');
                        } else {
                            output.error('Error!', 'The profile was not updated.');
                        }
                    },
                    error: function (msg) {
                        output.error('Error!', 'The profile was not updated.');
                    }
                });
            } else {
                output.error('No information was entered!', 'Please enter text in the fields you want to change.');
            }
            return false;
        });
    };

    /**
     * Creates the conctent of the balance page
     * @returns {string} The html of the balance page
     */
    function showBalance() {
        content.html('<legend>Current payment method</legend>\
                    <img src="./VisaMastercard.jpg" height="300px" width="200px">\
                    <p>Visa/mastercard: XXXX-XXXX-XXXX-3457</p>\
                    <button id="paymentMethodButton" class="btn btn-primary">Change payment method</button>\
                <br/><br/><br/>\
                <legend>Add credits to your account</legend>\
                <p>Current balance: <span id="userBalance">' + framework.user.balance + '</span> $</p>\
                <form id="balanceForm" class="form-inline">\
                    <div class="input-prepend input-append">\
                        <span class="add-on">$</span>\
                        <input class="span2" id="moneyInput" type="number" required="required">\
                        <span class="add-on">.00</span>\
                    </div>\
                    <input id="editUserSubmit" type="submit" class="btn btn-primary" value="Make transfer"/>\
                </form>');
        $('#balanceForm').submit(function () {
            var money = $("#moneyInput").val().trim();
            var postData = {moneyAmount: money};
            $.ajax({
                url: 'http://rentit.itu.dk/RentIt25/moofy.svc/users/' + framework.user.id + '/deposit',
                type: 'POST',
                data: JSON.stringify(postData),
                contentType: 'application/json; charset=utf-8',
                dataType: 'json',
                async: true,
                success: function (msg) {
                    if (msg.success) {
                        framework.user.balance += +money; //The unary + operator is required to treat money as an int rather than string
                        $('#userBalance').text(framework.user.balance);
                        output.success('Money transfered!', 'The money was succesfully transferred.');
                    } else {
                        output.error('Error!', 'The money was not transferred.');
                    }
                },
                error: function (msg) {
                    output.error('Error!', 'The money was not transferred.');
                }
            });
            return false;
        });


        $('#paymentMethodButton').click(function () {
            output.modal('This function does not exist yet', 'You can not change your payment method in the Moofy beta experience.');
        });
    };

    /**
     * Sets the page in the overview view
     * @param number The page number. 0 indexed.
     */
    function setPage(number)
    {
        currentPage = number;
        createAccordion();
    }

    /**
     * Creates the page-indicator at the bottom
     */
    function createpaginate() {
        var pagination = '<li' + ((currentPage == 0) ? ' class="disabled" ' : '') + '><a href="javascript:' + ((currentPage == 0) ? 'void(0)' : 'setPage('+ (currentPage - 1) +')') + '">Previous</a></li>';
        for(var i = 0; i<currentItems.length ; i = i + itemsPerPage) {
            pagination += '<li' + ((currentPage == (i/itemsPerPage)) ? ' class="active" ' : '') + '><a href="javascript:setPage('+ (i/itemsPerPage) +
                    ')">'+(i/itemsPerPage+1)+'</a></li>';
        }
        pagination += '<li' + ((currentPage == (Math.floor(currentItems.length/itemsPerPage))) ? ' class="disabled" ' : '') + '><a href="javascript:' + ((currentPage == (Math.floor(currentItems.length/itemsPerPage))) ? 'void(0)' : 'setPage('+ (currentPage + 1) +
                ')') + '" >Next</a></li>';
        $('#accountPaginationList').html(pagination);
    }

    /**
     * Creates the list of items for the user
     */
    function createAccordion() {
        var mediaTypeFirstUpper = currentMediaType.charAt(0).toUpperCase()+ currentMediaType.slice(1);
        var items = currentItems;
        var accordion = '';
        var startIndex = currentPage * itemsPerPage;
        var endIndex = startIndex + itemsPerPage; //exclusive

        for(var i = startIndex; i<endIndex && i<items.length ; i++) {
            accordion +=
                    '<div class="accordion-group">\
                        <div class="accordion-heading">\
                            <a class="accordion-toggle" data-toggle="collapse" data-parent="#accordion" href="#collapse' + i + '">' +
                                items[i].title
                         + '</a>\
                        </div>\
                        <div id="collapse' + i + '" class="accordion-body collapse">\
                            <div class="accordion-inner">\
                                <div class="row">\
                                    <div class="span2">\
                                        <img class="img-polaroid" src="' +items[i].coverUri+'" alt="" height="126px" width="98px" display="inline" />\
                                    </div>\
                                    <div class="span7">\
                                        <p>'
                                            + items[i].description +
                                        '</p>\
                                    </div>\
                                    <div class="span2">\
                                        <div class="btn-group btn-group-vertical pull-right">\
                                            <a class="btn internal" href="?'+currentMediaType+'Id='+items[i].id+'#'+currentMediaType+'">Description</a>\
                                            <a class="btn internal" href="?'+currentMediaType+'Id='+items[i].id+'#show'+mediaTypeFirstUpper+'">Watch</a>\
                                            <a class="btn" id="downloadLink" href="'+getDownloadLink(items[i])+'" download="'+items[i].title+'">Download</a>\
                                        </div>\
                                    </div>\
                                </div>\
                            </div>\
                        </div>\
                    </div>';
        }
        $('#accordion').html(accordion);
        createpaginate();
    }

    //Adds a click listener to the navigation of the account page.
    $("#accountNavigation a").click(function (e) {
        e.preventDefault(); //Prevent the default click listener, since this is a a-tag.
        $("#accountNavigation li.active").removeClass("active"); //Remove the active styling of every account navigation tab, ...
        $(this).parent().addClass("active"); //and it it again to the parent of the clicked link
        switch (this.id) {
            case('accountOverview'):
                    showOverview();
                break;
            case('accountEdit'):
                    showEdit();
                break;
            case('accountBalance'):
                showBalance();
                break;
        }
    });
    showOverview();
}
</script>